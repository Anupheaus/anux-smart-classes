{"version":3,"sources":["webpack://anux-smart-classes/webpack/universalModuleDefinition","webpack://anux-smart-classes/webpack/bootstrap","webpack://anux-smart-classes/./src/registry.ts","webpack://anux-smart-classes/./src/index.ts","webpack://anux-smart-classes/./src/SmartClass.ts","webpack://anux-smart-classes/./src/definitions.ts","webpack://anux-smart-classes/external \"anux-common\"","webpack://anux-smart-classes/./src/createIsBaseTypeFor.ts","webpack://anux-smart-classes/./src/createConstructor.ts","webpack://anux-smart-classes/./src/createPrototype.ts","webpack://anux-smart-classes/./src/errors/index.ts","webpack://anux-smart-classes/./src/errors/MetaNotFound.ts","webpack://anux-smart-classes/./src/variable.ts","webpack://anux-smart-classes/./src/models.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","instanceRegistry","WeakMap","baseTypeOnDefinitionRegistry","instanceTypes","getInstanceMeta","instance","getBaseTypeMeta","type","meta","baseTypePublicInstance","extendedTypes","recordInstanceType","has","set","associateMetaWith","instances","forEach","isOfType","setBaseTypeOnDefinition","definition","getInstanceMetaFromDefinition","SmartClass","fullDefinition","createFullDefinition","result","createConstructor","setName","constructor","setBaseTypeOnDefinitions","extractDerivedDefinition","isBaseTypeFor","createIsBaseTypeFor","entries","memberDefinition","is","function","scope","newDefinition","Reflect","areShallowEqual","values","derivedDefinition","includes","require","ctor","args","internalInstancePrototype","createPrototype","internalInstance","protectedInstance","this","variables","addInternalSettingsTo","internalSettings","ExtendedCtor","publicInstanceOfExtendedClass","extendedMeta","configurable","createSmartClassWrapper","func","bindFunc","smartClassWrapper","MetaNotFound","scopes","memberName","defineMethod","methodDefinition","propertyDefinition","undefined","defineVariable","variableGetter","variableSetter","Error","_instance","super","variable","valueType","TypeOf"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"anux-smart-classes\"] = factory();\n\telse\n\t\troot[\"anux-smart-classes\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { InstanceOf, SmartClassType, ClassDefinition, GetScopedMembersFrom, FullMemberDefinition } from './models';\r\nimport { AnyObject } from 'anux-common';\r\n\r\nexport interface InstanceMeta<T extends ClassDefinition> {\r\n  type: SmartClassType<any>;\r\n  internalInstance: GetScopedMembersFrom<T, 'public' | 'protected' | 'private'>;\r\n  protectedInstance: GetScopedMembersFrom<T, 'public' | 'protected'>;\r\n  extendedTypes: WeakMap<SmartClassType<any>, InstanceOf<SmartClassType<any>>>;\r\n  variables: AnyObject;\r\n}\r\n\r\nconst instanceRegistry = new WeakMap<InstanceOf<SmartClassType<any>>, InstanceMeta<any>>();\r\nconst baseTypeOnDefinitionRegistry = new WeakMap<FullMemberDefinition, SmartClassType<any>>();\r\nconst instanceTypes = new WeakMap<AnyObject, string>();\r\n\r\nexport function recordInstanceType(instance: AnyObject, type: string): void {\r\n  if (instanceTypes.has(instance)) return;\r\n  instanceTypes.set(instance, type);\r\n}\r\n\r\nexport function getInstanceMeta<T extends ClassDefinition>(instance: InstanceOf<SmartClassType<T>>) {\r\n  return instanceRegistry.get(instance) as InstanceMeta<T> | undefined;\r\n}\r\n\r\nexport function associateMetaWith<T extends ClassDefinition>(meta: InstanceMeta<T>, ...instances: AnyObject[]): void {\r\n  instances.forEach(instance => instanceRegistry.set(instance, meta));\r\n}\r\n\r\nexport function getBaseTypeMeta<T extends ClassDefinition>(instance: InstanceOf<SmartClassType<any>>, type: SmartClassType<T>) {\r\n  const meta = getInstanceMeta(instance);\r\n  if (!meta) return undefined;\r\n  if (meta.type === type) return meta;\r\n  const baseTypePublicInstance = meta.extendedTypes.get(type);\r\n  if (!baseTypePublicInstance) return undefined;\r\n  return getInstanceMeta(baseTypePublicInstance);\r\n}\r\n\r\nexport function isOfType(instance: InstanceOf<SmartClassType<any>>, type: SmartClassType<any>): boolean {\r\n  const meta = getBaseTypeMeta(instance, type);\r\n  if (!meta) return false;\r\n  return meta.extendedTypes.has(type);\r\n}\r\n\r\nexport function setBaseTypeOnDefinition<T extends ClassDefinition>(definition: FullMemberDefinition, type: SmartClassType<T>): void {\r\n  if (baseTypeOnDefinitionRegistry.has(definition)) return;\r\n  baseTypeOnDefinitionRegistry.set(definition, type);\r\n}\r\n\r\nexport function getInstanceMetaFromDefinition<T extends ClassDefinition>(instance: InstanceOf<SmartClassType<T>>,\r\n  definition: FullMemberDefinition): InstanceMeta<T> | undefined {\r\n  const type = baseTypeOnDefinitionRegistry.get(definition);\r\n  if (!type) return;\r\n  return getBaseTypeMeta(instance, type);\r\n}\r\n","export { SmartClass } from './SmartClass';\r\nexport type { InstanceOf, SmartClassType } from './models';\r\nexport * from './variable';","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ClassDefinition, SetThisTypeOn, SmartClassType } from './models';\r\nimport { createFullDefinition, extractDerivedDefinition, setBaseTypeOnDefinitions } from './definitions';\r\nimport { createIsBaseTypeFor } from './createIsBaseTypeFor';\r\n// import { registerBaseType } from './registries';\r\nimport { createConstructor } from './createConstructor';\r\n\r\nexport const SmartClass = {\r\n  define<T extends ClassDefinition>(definition: T & SetThisTypeOn<T>): SmartClassType<T> {\r\n    const fullDefinition = createFullDefinition(definition);\r\n    const result = createConstructor<T>(fullDefinition);\r\n    result.setName(definition.constructor.name);\r\n    setBaseTypeOnDefinitions(fullDefinition, result);\r\n    result.definition = extractDerivedDefinition<T>(fullDefinition);\r\n    result.isBaseTypeFor = createIsBaseTypeFor(result);\r\n    return result;\r\n  },\r\n};\r\n\r\n// const Users = SmartClass.define({\r\n//   constructor(blah: boolean): void {\r\n//     /* do nothing */\r\n//   },\r\n\r\n//   something: {\r\n//     type: 'variable',\r\n//     valueType: TypeOf<string>(),\r\n//   },\r\n\r\n//   user: {\r\n//     scope: 'protected',\r\n//     get(): string | undefined {\r\n\r\n//       return this.something;\r\n//     },\r\n//     set(value: string) {\r\n//       this.something = value;\r\n//     },\r\n//   },\r\n\r\n//   test(test: string): Promise<void> {\r\n//     this.user = undefined\r\n//     return Promise.resolve();\r\n//   },\r\n\r\n//   test2(blah: string): boolean {\r\n//     return true;\r\n//   },\r\n\r\n\r\n// });\r\n\r\n// const Users2 = SmartClass.define({\r\n//   constructor() {\r\n//     this._.extendWith(Users, true);\r\n//   },\r\n\r\n//   ...Users.definition,\r\n\r\n//   gerr(something: string): void {\r\n\r\n//   },\r\n\r\n// });\r\n\r\n// const b = new Users2();\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ClassDefinition, MemberDefinition, MemberTypes, FullClassDefinition, GetScopedDefinitionsFrom, SmartClassType, FullMemberDefinition } from './models';\r\nimport { is, MapOf, AnyObject } from 'anux-common';\r\nimport { setBaseTypeOnDefinition } from './registry';\r\n\r\nexport function createFullDefinition<T extends ClassDefinition>(definition: T) {\r\n  const fullDefinition: MapOf<MemberDefinition> = {};\r\n  Object.entries(definition).forEach(([key, memberDefinition]) => {\r\n    if (!memberDefinition) return;\r\n    fullDefinition[key] = memberDefinition;\r\n    if (key === 'constructor') return;\r\n    if (is.function(memberDefinition)) {\r\n      fullDefinition[key] = {\r\n        type: 'method',\r\n        scope: 'public',\r\n        definition: memberDefinition,\r\n      };\r\n    } else {\r\n      if (memberDefinition.scope === 'private') return;\r\n      if (memberDefinition.type === 'variable' && memberDefinition.scope != null) return;\r\n      const type: MemberTypes = memberDefinition.type != null ? memberDefinition.type : 'definition' in memberDefinition ? 'method' : 'property';\r\n      const newDefinition = {\r\n        type: type as any,\r\n        scope: type === 'variable' ? 'private' : 'public',\r\n        ...memberDefinition,\r\n      };\r\n      fullDefinition[key] = (Reflect.areShallowEqual(newDefinition, memberDefinition) ? memberDefinition : newDefinition) as FullMemberDefinition;\r\n    }\r\n  });\r\n  return fullDefinition as T;\r\n}\r\n\r\nexport function setBaseTypeOnDefinitions<T extends ClassDefinition>(fullDefinition: T, type: SmartClassType<T>): void {\r\n  Object.values<FullMemberDefinition>(fullDefinition as FullClassDefinition).forEach(definition => setBaseTypeOnDefinition(definition, type));\r\n}\r\n\r\nexport function extractDerivedDefinition<T extends ClassDefinition>(fullDefinition: T) {\r\n  const derivedDefinition: AnyObject = {};\r\n  Object.entries(fullDefinition as FullClassDefinition)\r\n    .forEach(([key, definition]) => {\r\n      if (['public', 'protected'].includes(definition.scope)) { derivedDefinition[key] = definition; }\r\n    });\r\n  return derivedDefinition as unknown as GetScopedDefinitionsFrom<T, 'public' | 'protected'>;\r\n}\r\n","module.exports = require(\"anux-common\");","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { SmartClassType, InstanceOf } from './models';\r\nimport { isOfType } from './registry';\r\n\r\nexport function createIsBaseTypeFor<T extends SmartClassType<any>>(type: T) {\r\n  return (instance: InstanceOf<SmartClassType<any>>): instance is InstanceOf<T> => isOfType(instance, type);\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ClassDefinition, SmartClassType, InstanceOf, GetScopedMembersFrom, SmartClassInternal } from './models';\r\nimport { InstanceMeta, getInstanceMeta, recordInstanceType, associateMetaWith } from './registry';\r\nimport { createPrototype } from './createPrototype';\r\n\r\nfunction addInternalSettingsTo<T extends ClassDefinition>(meta: InstanceMeta<T>): void {\r\n  const internalSettings: SmartClassInternal = {\r\n    extendWith<E extends ClassDefinition>(ExtendedCtor: SmartClassType<E>, ...args: Parameters<E['constructor']>): void {\r\n      const publicInstanceOfExtendedClass = new ExtendedCtor(...args);\r\n      meta.extendedTypes.set(ExtendedCtor, publicInstanceOfExtendedClass);\r\n    },\r\n    superOf<E extends ClassDefinition>(type: SmartClassType<E>) {\r\n      const publicInstanceOfExtendedClass = meta.extendedTypes.get(type) as GetScopedMembersFrom<E, 'public'>;\r\n      const extendedMeta = getInstanceMeta(publicInstanceOfExtendedClass);\r\n      return extendedMeta?.protectedInstance;\r\n    },\r\n  };\r\n  Object.defineProperty(meta.internalInstance, '_', {\r\n    get: () => internalSettings,\r\n    enumerable: false,\r\n    configurable: false,\r\n  });\r\n}\r\n\r\nexport function createConstructor<T extends ClassDefinition>(definition: T): SmartClassType<T> {\r\n  const ctor = function constructor(this: InstanceOf<SmartClassType<T>>, ...args: any[]) {\r\n    const internalInstancePrototype = createPrototype(definition, ['public', 'protected', 'private']);\r\n    const internalInstance = Object.create(internalInstancePrototype);\r\n    recordInstanceType(internalInstance, `Internal - ${ctor.name}`);\r\n    const protectedInstance = createPrototype(definition, ['public', 'protected']);\r\n    recordInstanceType(protectedInstance, `Protected - ${ctor.name}`);\r\n    recordInstanceType(this, `Public - ${ctor.name}`);\r\n    const meta: InstanceMeta<T> = {\r\n      type: ctor,\r\n      internalInstance,\r\n      protectedInstance,\r\n      extendedTypes: new WeakMap([[ctor, null]]) as any,\r\n      variables: {},\r\n    };\r\n    associateMetaWith(meta, this, internalInstance, protectedInstance);\r\n    addInternalSettingsTo(meta);\r\n    definition.constructor.call(internalInstance, ...args);\r\n    return this;\r\n  } as unknown as SmartClassType<T>;\r\n  ctor.prototype = createPrototype(definition, ['public']);\r\n  return ctor;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  FullClassDefinition, Scope, MethodDefinition, PropertyDefinition, ReadOnlyPropertyDefinition,\r\n  ClassDefinition, GetScopedMembersFrom, VariableDefinition, FullMemberDefinition, MemberDefinition\r\n} from './models';\r\nimport { AnyObject } from 'anux-common';\r\nimport { getInstanceMetaFromDefinition } from './registry';\r\nimport { MetaNotFound } from './errors';\r\n\r\nfunction createSmartClassWrapper(definition: MemberDefinition, func: Function, bindFunc: boolean) {\r\n  return function smartClassWrapper(this: AnyObject, ...args: any[]) {\r\n    const meta = getInstanceMetaFromDefinition(this, definition as FullMemberDefinition);\r\n    if (!meta) throw new MetaNotFound(this);\r\n    const instance = meta.internalInstance;\r\n    return bindFunc ? func.bind(instance) : func.call(instance, ...args);\r\n  };\r\n}\r\n\r\nfunction defineMethod(prototype: AnyObject, memberName: string, methodDefinition: MethodDefinition): void {\r\n  Object.defineProperty(prototype, memberName, {\r\n    get: createSmartClassWrapper(methodDefinition, methodDefinition.definition, true),\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction defineProperty(prototype: AnyObject, memberName: string, propertyDefinition: PropertyDefinition | ReadOnlyPropertyDefinition): void {\r\n  Object.defineProperty(prototype, memberName, {\r\n    get: createSmartClassWrapper(propertyDefinition, propertyDefinition.get, true),\r\n    set: 'set' in propertyDefinition ? createSmartClassWrapper(propertyDefinition, propertyDefinition.set, false) : undefined,\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nfunction defineVariable(prototype: AnyObject, memberName: string, definition: VariableDefinition): void {\r\n  function variableGetter(this: AnyObject) {\r\n    const meta = getInstanceMetaFromDefinition(this, definition as FullMemberDefinition);\r\n    if (!meta) throw new MetaNotFound(this);\r\n    return meta.variables[memberName];\r\n  }\r\n  function variableSetter(this: AnyObject, value: any) {\r\n    const meta = getInstanceMetaFromDefinition(this, definition as FullMemberDefinition);\r\n    if (!meta) throw new MetaNotFound(this);\r\n    meta.variables[memberName] = value;\r\n  }\r\n  const get = variableGetter.setName(`${memberName}_getter`);\r\n  const set = variableSetter.setName(`${memberName}_setter`);\r\n  Object.defineProperty(prototype, memberName, {\r\n    get,\r\n    set,\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\nexport function createPrototype<T extends ClassDefinition, S extends Scope[]>(definition: T, scopes: S) {\r\n  const prototype: AnyObject = {};\r\n  Object.entries(definition as FullClassDefinition).forEach(([memberName, memberDefinition]) => {\r\n    if (!scopes.includes(memberDefinition.scope)) return;\r\n    switch (memberDefinition.type) {\r\n      case 'method':\r\n        defineMethod(prototype, memberName, memberDefinition);\r\n        break;\r\n      case 'property':\r\n        defineProperty(prototype, memberName, memberDefinition);\r\n        break;\r\n      case 'variable':\r\n        defineVariable(prototype, memberName, memberDefinition);\r\n        break;\r\n    }\r\n  });\r\n  return prototype as GetScopedMembersFrom<T, S[number]>;\r\n}","export * from './MetaNotFound';\r\n","export class MetaNotFound extends Error {\r\n  constructor(_instance: Object) {\r\n    super('Cannot find meta on this instance');\r\n  }\r\n}","import { VariableDefinition, TypeOf } from './models';\r\n\r\nexport const variable = <T>(): VariableDefinition<T> => ({\r\n  type: 'variable',\r\n  valueType: TypeOf<T>(),\r\n});","import { MapOf } from 'anux-common';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nexport type Scope = 'private' | 'protected' | 'public';\r\n\r\nexport type FunctionDefinition = (...args: any[]) => any | void;\r\n\r\nexport type MemberTypes = 'method' | 'property' | 'variable';\r\n\r\nexport type DirectMethodDefinition<T = FunctionDefinition> = T;\r\n\r\nexport type MethodDefinition<T = FunctionDefinition> = {\r\n  type?: 'method';\r\n  scope?: Scope;\r\n  definition: T;\r\n}\r\n\r\nexport type DirectOrFullMethodDefinition<T = FunctionDefinition> = DirectMethodDefinition<T> | MethodDefinition<T>;\r\n\r\nexport interface PropertyDefinition<T = any> {\r\n  type?: 'property';\r\n  scope?: Scope;\r\n  get(): T;\r\n  set(value: T): void;\r\n}\r\n\r\nexport interface ReadOnlyPropertyDefinition<T = any> {\r\n  type?: 'property';\r\n  scope?: Scope;\r\n  get(): T;\r\n}\r\n\r\nexport function TypeOf<T>(): T { return null as unknown as T; }\r\n\r\nexport interface VariableDefinition<T = any> {\r\n  type: 'variable';\r\n  scope?: Scope;\r\n  valueType: T;\r\n}\r\n\r\nexport type FullMemberDefinition = Required<MethodDefinition | PropertyDefinition | ReadOnlyPropertyDefinition | VariableDefinition>;\r\nexport type MemberDefinition = DirectMethodDefinition | MethodDefinition | PropertyDefinition | ReadOnlyPropertyDefinition | VariableDefinition;\r\n\r\nexport interface ClassDefinition {\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\r\n  constructor(...args: any[]): any;\r\n  [key: string]: MemberDefinition;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-misused-new\r\nexport type FullClassDefinition = MapOf<FullMemberDefinition> & { constructor(...args: any[]): any }\r\n\r\nexport type MemberKeysOf<T extends {}> = T[keyof Omit<T, 'constructor'>];\r\n\r\ntype AddDefaultsTo<T> = (T extends VariableDefinition ? (T extends { scope: Scope } ? {} : { scope: 'private' }) : (T extends { scope: Scope } ? {} : { scope: 'public' })) & T;\r\n\r\nexport type GetScopedMemberKeysThatExtend<E extends MemberDefinition, S extends Scope, T extends ClassDefinition> = MemberKeysOf<{\r\n  [K in keyof T]: AddDefaultsTo<T[K]> extends E & { scope: S } ? K : never;\r\n}>;\r\n\r\nexport type GetMemberKeysThatExtend<E extends MemberDefinition, T extends ClassDefinition> = MemberKeysOf<{ [K in keyof T]: T[K] extends E ? K : never }>;\r\n\r\n/* eslint-disable @typescript-eslint/indent */\r\nexport type GetScopedMembersFrom<T extends ClassDefinition, S extends Scope> =\r\n  { [K in GetScopedMemberKeysThatExtend<PropertyDefinition, S, T>]: T[K] extends PropertyDefinition<infer A> ? A : never; }\r\n  & { readonly [K in Exclude<GetScopedMemberKeysThatExtend<ReadOnlyPropertyDefinition, S, T>,\r\n    GetMemberKeysThatExtend<PropertyDefinition, T>>]: T[K] extends ReadOnlyPropertyDefinition<infer A> ? A : never; }\r\n  & { [K in GetScopedMemberKeysThatExtend<DirectOrFullMethodDefinition, S, T>]: T[K] extends DirectOrFullMethodDefinition<infer A> ? A : never; }\r\n  & { [K in GetScopedMemberKeysThatExtend<VariableDefinition, S, T>]: T[K] extends VariableDefinition<infer A> ? A : never; };\r\n/* eslint-enable @typescript-eslint/indent */\r\n\r\n/* eslint-disable @typescript-eslint/indent */\r\nexport type GetAllMembersFrom<T extends ClassDefinition> =\r\n  { [K in GetMemberKeysThatExtend<PropertyDefinition, T>]: T[K] extends PropertyDefinition<infer A> ? A : never; }\r\n  & { readonly [K in Exclude<GetMemberKeysThatExtend<ReadOnlyPropertyDefinition, T>,\r\n    GetMemberKeysThatExtend<PropertyDefinition, T>>]: T[K] extends ReadOnlyPropertyDefinition<infer A> ? A : never; }\r\n  & { [K in GetMemberKeysThatExtend<DirectOrFullMethodDefinition, T>]: T[K] extends DirectOrFullMethodDefinition<infer A> ? A : never; }\r\n  & { [K in GetMemberKeysThatExtend<VariableDefinition, T>]: T[K] extends VariableDefinition<infer A> ? A : never; };\r\n/* eslint-enable @typescript-eslint/indent */\r\n\r\nexport type MakeFullDefinitionWith<FullDefinition, PartialDefinition> = Required<Exclude<FullDefinition, PartialDefinition> & PartialDefinition>;\r\n\r\n/* eslint-disable @typescript-eslint/indent */\r\nexport type ConvertToFullDefinition<T extends MemberDefinition> = T extends FunctionDefinition ? { type: 'method'; scope: 'public'; definition: T } :\r\n  T extends PropertyDefinition<infer A> ? MakeFullDefinitionWith<PropertyDefinition<A>, T> :\r\n  T extends ReadOnlyPropertyDefinition<infer A> ? MakeFullDefinitionWith<ReadOnlyPropertyDefinition<A>, T> :\r\n  T extends VariableDefinition<infer A> ? MakeFullDefinitionWith<VariableDefinition<A>, T> :\r\n  T extends DirectOrFullMethodDefinition<infer A> ? MakeFullDefinitionWith<DirectOrFullMethodDefinition<A>, T> : never;\r\n/* eslint-enable @typescript-eslint/indent */\r\n\r\nexport type GetScopedDefinitionsFrom<T extends ClassDefinition, S extends Scope> = { [K in GetScopedMemberKeysThatExtend<MemberDefinition, S, T>]: ConvertToFullDefinition<T[K]> };\r\n\r\nexport type SmartClassType<T extends ClassDefinition> = {\r\n  new(...args: Parameters<T['constructor']>): GetScopedMembersFrom<T, 'public'>;\r\n  definition: GetScopedDefinitionsFrom<T, 'protected' | 'public'>;\r\n  instance: GetScopedMembersFrom<T, 'public'>;\r\n  isBaseTypeFor(instance: InstanceOf<SmartClassType<any>>): instance is InstanceOf<SmartClassType<T>>;\r\n};\r\n\r\nexport type InstanceOf<T extends SmartClassType<any>> = T extends SmartClassType<infer A> ? GetScopedMembersFrom<A, 'public'> : never;\r\n\r\ntype GetConstructorParametersFrom<T extends SmartClassType<any>> = T extends SmartClassType<infer A> ? Parameters<A['constructor']> : never;\r\n\r\nexport interface SmartClassInternal {\r\n  extendWith<T extends SmartClassType<any>>(classType: T, ...constructorParameters: GetConstructorParametersFrom<T>): void;\r\n  superOf<T extends ClassDefinition>(classType: SmartClassType<T>): GetScopedMembersFrom<T, 'public' | 'protected'> | undefined;\r\n}\r\n\r\nexport type SetThisTypeOn<T extends ClassDefinition> = T & ThisType<GetAllMembersFrom<T> & { _: SmartClassInternal }>;"],"sourceRoot":""}